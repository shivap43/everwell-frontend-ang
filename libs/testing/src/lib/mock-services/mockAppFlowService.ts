import { AddCartItem, GetCartItems, PlanOfferingPricing, StepData } from "@empowered/constants";
import { BehaviorSubject, of, Subject } from "rxjs";

export const mockAppFlowService = {
    showNextProductFooter$: new Subject<{ nextClick: boolean; data: string }>(),
    checkTpi: () => true,
    reinstateLastCompletedBillingIndex$: of(),
    getcallCenterPin: () => "",
    setcallCenterPin: (pin: string) => null,
    getTobaccoStatus: () => false,
    getTobaccoSettings: (tobaccoStatus: boolean, coverageDate: string, cartData: GetCartItems) => {},
    getTobaccoResponse: (planObject: StepData) => false,
    getDualAccountRiskClassId: (productId: number) => 1,
    getUpdatedCartItems: (
        planOfferings: number[],
        priceList: PlanOfferingPricing[][],
        cartData: GetCartItems[],
        coverageEffectiveDate: string,
    ) => [],
    getPremiumCostDetails: (cartItems: AddCartItem[]) => {},
    emitVf2fStep: (stepIndex: number) => {},
    lastCompletedBillingIndex: of(),
    paymentStepPosition: new Subject<number>(),
    planChanged$: new Subject<{ nextClicked: boolean; discard: boolean }>(),
    lastCompleteStaticStep: new Subject<number>(),
    onNextClick: (planObject: StepData, currentStepIndex: number, sectionTitle: string, riders?: string) => {},
    isNotProduction: () => of(true),
    onNextTPIButton: (lastStep: boolean, nextProduct: string, hasAflacAlways: boolean, fromDirect: boolean, hasEBSBilling: boolean) => "",
    getTpiAssistingAdminId: () => {},
    isSelfServiceEnrollmentBanned: (mpGroup?: number) => of(),
    getEmployerContributionPlans: () => [],
    lastCompletedPaymentIndex: of(),
    paymentStepNext$: new Subject<number>(),
    initalizeBillingStep: (isBillingStep: boolean) => {},
    paymentMethod$: new BehaviorSubject<string>(""),
    CustomSectionChanged$: new Subject<any>(),
    reviewAflacAlwaysStatus$: new Subject<string>(),
    getReviewAflacAlwaysStatus: () => of(""),
    setReviewAflacStatus: (reviewAflacAlwaysStatus: string) => null,
    getReviewAflacAlwaysInitial: () => of(""),
    setReviewAflacInitial: (reviewAflacAlwaysInitial: string) => null,
    readHipaaConsentForm: new Subject<string[]>(),
};
